{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/main/Work/project_Sensibility_font-end/src/pages/index.tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query($login: String, $password: String) {\\n    authUser(login: $login, password: $password){\\n      name\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nexport var ALL_POSTS_QUERY = gql(_templateObject());\n\nvar IndexPage = function IndexPage(props) {\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    variables: {\n      login: 'log',\n      password: \"pas\"\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  var _useQuery2 = useQuery(ALL_POSTS_QUERY, {\n    variables: {\n      login: 'log',\n      password: \"pas\"\n    }\n  }),\n      loading1 = _useQuery2.loading1,\n      error1 = _useQuery2.error1,\n      data2 = _useQuery2.data2,\n      fetchMore1 = _useQuery2.fetchMore1,\n      networkStatus1 = _useQuery2.networkStatus1;\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"Welcome to Next.js!\", _JSON$stringify(data, data2));\n};\n\nexport default withApollo(IndexPage, {\n  // Disable apollo ssr fetching in favour of automatic static optimization\n  ssr: false\n});","map":{"version":3,"sources":["/home/main/Work/project_Sensibility_font-end/src/pages/index.tsx"],"names":["withApollo","useQuery","gql","ALL_POSTS_QUERY","IndexPage","props","variables","login","password","loading","error","data","fetchMore","networkStatus","loading1","error1","data2","fetchMore1","networkStatus1","ssr"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,OAAO,IAAMC,eAAe,GAAGD,GAAH,mBAArB;;AAQP,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAAA,kBACgCJ,QAAQ,CAACE,eAAD,EAAkB;AAAEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,QAAQ,EAAE;AAA1B;AAAb,GAAlB,CADxC;AAAA,MACnBC,OADmB,aACnBA,OADmB;AAAA,MACVC,KADU,aACVA,KADU;AAAA,MACHC,IADG,aACHA,IADG;AAAA,MACGC,SADH,aACGA,SADH;AAAA,MACcC,aADd,aACcA,aADd;;AAAA,mBAEqCZ,QAAQ,CAACE,eAAD,EAAkB;AAAEG,IAAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE,KAAT;AAAgBC,MAAAA,QAAQ,EAAE;AAA1B;AAAb,GAAlB,CAF7C;AAAA,MAEnBM,QAFmB,cAEnBA,QAFmB;AAAA,MAETC,MAFS,cAETA,MAFS;AAAA,MAEDC,KAFC,cAEDA,KAFC;AAAA,MAEMC,UAFN,cAEMA,UAFN;AAAA,MAEkBC,cAFlB,cAEkBA,cAFlB;;AAG3B,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAAyB,gBAAeP,IAAf,EAAqBK,KAArB,CAAzB,CAAP;AACD,CAJD;;AAMA,eAAehB,UAAU,CAACI,SAAD,EAAY;AACnC;AACAe,EAAAA,GAAG,EAAE;AAF8B,CAAZ,CAAzB","sourcesContent":["import { withApollo } from '../lib/apollo';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\n\nexport const ALL_POSTS_QUERY = gql`\n  query($login: String, $password: String) {\n    authUser(login: $login, password: $password){\n      name\n    }\n  }\n`\n\nconst IndexPage = (props) => {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(ALL_POSTS_QUERY, { variables: { login: 'log', password: \"pas\" } });\n  const { loading1, error1, data2, fetchMore1, networkStatus1 } = useQuery(ALL_POSTS_QUERY, { variables: { login: 'log', password: \"pas\" } })\n  return <div>Welcome to Next.js!{JSON.stringify(data, data2)}</div>;\n}\n\nexport default withApollo(IndexPage, {\n  // Disable apollo ssr fetching in favour of automatic static optimization\n  ssr: false,\n})"]},"metadata":{},"sourceType":"module"}